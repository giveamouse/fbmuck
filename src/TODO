These items are mandatory for FB6 release:
  Update documentation.  (Especially the muf prim index.)


These items are deferred:
  Fix compression bugs, or implement new compression schema.
  Add memory usage based limits on MUF progs.
  Add CONTENTS_ARRAY muf primitive.  (Hmm.  On #0 this could be bad.)

  Separate MPI perms away from Builder bit a la ProtoMUCK.
  Implement Viewable flag for MUF program @listing.
  Add Per-User CPU usage throttles.

  ISO-Latin high-bit character support.
  SWITCH/CASE compiler support within MUF.
  Secure communications layer.
  Hashed passwords in database.  If this is implemented, there _must_ exist a
    command line option to reset #1's password.
  MUF ability to call in-server commands acting as player (ie: WHO, or @dig).
  Integrate time() speedups.

  ARRAY_FILTER_LOCK ([d] l -- [d']) As per ARRAY_FILTER_PROP, except only
    those dbrefs that would pass the given lock are returned.
 
  CORD_OPEN  (          intDescr strType -- strCordID)
  CORD_SEND  (strCordID strName dictData -- )
  CORD_CLOSE (                 strCordID -- )

  Modify array code to allow floats and dbrefs as indexes.
  WATCHPROP (d s -- ) Specifies that this process wants to recieve an event
    when the given property on the given object is set, deleted, or changed.
    The event received will have an ID of "PROPCHANGE.#dbref.propname" where
    the dbref and the property name will be replaced by those of the property
    you specified.



These items may be considered to be a wishlist:
  In-server gagging based on lock-style structures.  This would ensure that
    any text that was generated by something or someone which 'passed' the
    given lock string, would never be sent to the user.
  Player Point-of-View forwarding.  This would allow a program or a player to
    see _exactly_ what a given player is seeing, if the source player allows
    it via the use of a lock and a _listen - styled proplist _and_ a matching
    'receive' lock on the target (in the case of players/objects/rooms).
  TCP/IP socket communications layer.
  Matrix math.
  3D manipulation primitives.

