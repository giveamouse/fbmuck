These items may be considered to be 'mandatory' for release:
Separate MPI perms away from Builder bit a la ProtoMUCK.
Implement Viewable flag for MUF program @listing.
Integrate multiple listener ports mods.
Integrate time() speedups.
Fix compression bugs, or implement new compression schema.

Modify array code to allow floats and dbrefs as indexes.
ARRAY_FILTER_PROP ([d] s1 s2 -- [d']) Takes a homogenous list array of dbrefs,
  and returns a list array with only those dbrefs who have a property specified
  by s1, set to a value that smatch matches s2.
ARRAY_FILTER_LOCK ([d] l -- [d']) As per ARRAY_FILTER_PROP, except only
  those dbrefs that would pass the given lock are returned.
ARRAY_MATCHKEYS ([s] s - [s']) Given an array and an smatch string, returns a
  dictionary list of all entries whos indexes (keys) matched the smatch.
ARRAY_MATCHVALS ([s] s - [s']) Given an array and an smatch string, returns a
  dictionary list of all entries whos values matched the smatch.
ARRAY_EXTRACT ([?] [@] -- [?]) Takes an array, and returns every element whose
  name is in the index array. (The @ means an index item.  String or int.)
ARRAY_JOIN ([s] s -- s) Takes a list array of strings and a delimiter string,
  and returns a single string that is the concatenation of all the strings in
  the list array, with the delimiter string in between.  For example:
    { "one" "two" "three" }list "... " array_join
  will result in a single string: "one... two... three"

REFLIST_ADD ( ref:ToAdd ref:Object str:PropName -- ) Adds a dbref to a
  reflist if it is not already in the list.
REFLIST_DELETE ( ref:ToDel ref:Object str:PropName -- ) Removed a dbref from
  a reflist if it is in it.
REFLIST_FIND ( ref:ToFind ref:Object str:PropName -- int:Position ) Finds a
  given dbref in a reflist, and returns its position.  Returns 0 if not found.
  First dbref in reflist is 1.

CORD_OPEN  (          intDescr strType -- strCordID)
CORD_SEND  (strCordID strName dictData -- )
CORD_CLOSE (                 strCordID -- )

WAITPROP (d s -- ) Wait for a property on a given object to be changed or
  deleted.
FINDNEXT (d s1 s2 -- d) Finds the next object that matches the name pattern
  s2, and the flag pattern s1.  The flag pattern is the same as that used in
  @find or @owned.  A dbref of #-1 is returned when no more items match.
  The search is debug with a dbref of #-1.  (Note - should this be broken down
  into a FIND command and then just have a FINDNEXT ( d -- d ) portion?)

These items may be considered to be optional for release:
ISO-Latin high-bit character support.
SWITCH/CASE compiler support within MUF.
Secure communications layer.
Hashed passwords in database.  If this is implemented, there _must_ exist a
  command line option to reset #1's password.
MUF ability to call in-server commands acting as player (ie: WHO, or @dig).

These items may be considered to be a wishlist:
In-server gagging based on lock-style structures.  This would ensure that
  any text that was generated by something or someone which 'passed' the
  given lock string, would never be sent to the user.
Player Point-of-View forwarding.  This would allow a program or a player to
  see _exactly_ what a given player is seeing, if the source player allows
  it via the use of a lock and a _listen - styled proplist _and_ a matching
  'receive' lock on the target (in the case of players/objects/rooms).
TCP/IP socket communications layer.
Matrix math.
3-d manipulation primitives.

