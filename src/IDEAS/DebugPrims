Addresses will need to be alterable via +, -, ++, and --.



ADDRESS_DBREF (addr:address -- ref:program)
  Returns the program dbref portion of an address.

ADDRESS_LINE (addr:address -- int:linenum)
  Returns the compiled line number of the given address.

ADDRESS_INSTNUM (addr:address -- int:instnum)
  Returns the instruction number portion of an address.



PROGRAM_INSTNAME (addr:address -- str:name)
  Returns the text representation of the bytecode instruction at the address.

PROGRAM_LINEADDR (ref:prog int:line -- addr:address)
  Returns the address of the first bytecode in the given program line.

PROGRAM_INSTADDR (ref:prog int:instrnum -- addr:address)
  Returns the address of the given instruction number in the target program.

PROGRAM_GETWORD (ref:prog str:funcname -- strlist:source)
  Returns the source code of the given function.

PROGRAM_WORDS (ref:prog -- strlist:names)
  Returns a list of names of all functions in the given compiled program.

PROGRAM_WORDNAME (addr:address -- str:funcname)
  Returns the name of the function that contains the given address.

PROGRAM_FINDWORD (ref:prog str:funcname -- addr:funcaddr)
  Returns the entry address of the given program function.

PROGRAM_GLOBALS (ref:prog -- list:names)
  Returns the names of all the global variables in the given compiled program.

PROGRAM_FINDGLOBAL (ref:prog str:varname -- int:varnum)
  Returns the variable number of the given named global variable.  Returns -1
  if the named variable is not found.

PROGRAM_LOCALVARS (ref:prog -- list:names)
  Returns the names of the program-local vars in the given compiled program.

PROGRAM_FINDLOCAL (ref:prog str:varname -- int:varnum)
  Returns the variable number of the given named program-local variable.
  Returns -1 if the named variable is not found.

PROGRAM_SCOPEDVARS (addr:address -- list:names)
  Returns the names of all the function-scoped variables in the function which
  contains the given address.

PROGRAM_FINDSCOPED (addr:address str:varname -- int:varnum)
  Returns the variable number of the named function-scoped variable from the
  function which contains the given address.  Returns -1 if the named variable
  is not found.



DEBUG_CONTINUE (int:pid -- )
  Causes the given breakpointed target process to continue.

DEBUG_EXECPRIM (int:pid str:instname -- )
  Causes the given program to execute the named instruction.

DEBUG_EXECWORD (int:pid addr:function -- )
  Causes the given program to call the named function.

DEBUG_TRACE_ON (int:pid -- )
  Turns on debug tracing in the target process.

DEBUG_TRACE_OFF (int:pid -- )
  Turns off debug tracing in the target process.



DEBUG_BREAK_CURRENT (int:pid -- int:breaknum)
  Returns the number of the breakpoint that caused the target process to stop.
  Returns -1 if the target program is not stopped in debug mode.

DEBUG_BREAK_COUNT (int:pid -- int:count)
  Returns the number of breakpoints set in the target process.

DEBUG_BREAK_INFO (int:pid int:breaknum -- dict:info)
  Returns a dictionary of available information about the given breakpoint.
  The specific information is still to be discussed.

DEBUG_BREAK_AT_ADDR (int:pid addr:address -- int:breaknum)
  Creates a breakpoint in the target process at the given address.  Returns
  the number of the breakpoint created.

DEBUG_BREAK_AFTER_INSTS (int:pid int:count -- int:breaknum)
  Creates a breakpoint in the target process that triggers when 'count'
  instructions have executed.  Returns the number of the breakpoint created.

DEBUG_BREAK_AFTER_LINES (int:pid int:count -- int:breaknum)
  Creates a breakpoint in the target process that triggers when 'count' lines
  of code have executed.  Returns the number of the breakpoint created.

DEBUG_BREAK_FINISH (int:pid int:count -- int:breaknum)
  Creates a breakpoint in the target process that triggers when the current
  function returns.  Returns the number of the breakpoint created.

DEBUG_BREAK_DELETE (int:pid int:breaknum -- )
  Deletes the given breakpoint in the target process.



DEBUG_SYSTEM_COUNT (int:pid -- int:count)
  Returns the number of addresses in the target process' system call stack.

DEBUG_SYSTEM_READ (int:pid int:level -- addr:address)
  Returns the address at the target process' given system call stack level.



DEBUG_STACK_COUNT (int:pid -- int:count)
  Returns the number of stack items in the target process' data stack.

DEBUG_STACK_READ (int:pid int:itemnum -- any:value )
  Returns the value stored in the given stack item of the target process.

DEBUG_STACK_INSERT (int:pid int:itemnum any:value -- )
  Inserts a value at the given position in the target process' data stack.
  Inserting at position -1 will push onto the top of the stack.

DEBUG_STACK_REMOVE (int:pid int:itemnum -- any:value)
  Removes a stack item from the given position of the target process.
  Removing from position -1 pops a value off the top of the target stack.
  Returns the value removed.



DEBUG_GLOBAL_READ (int:pid int:varnum -- any:value)
  Returns the value stored in the given global variable of the target process.

DEBUG_GLOBAL_WRITE (int:pid int:varnum any:value -- )
  Sets the value of the given global variable of the target process.



DEBUG_LOCAL_READ (int:pid ref:prog int:varnum -- any:value)
  Returns the value in the given program-local variable of the target process.

DEBUG_LOCAL_WRITE (int:pid ref:prog int:varnum any:value -- )
  Sets the value of the given program-local variable of the target process.



DEBUG_SCOPED_READ (int:pid int:level int:varnum -- any:value)
  Returns the value in the given function-scoped variable at the given call
  level of the target process.

DEBUG_SCOPED_WRITE (int:pid int:level int:varnum any:value -- )
  Sets the value of the given function-scoped variable at the given call
  level of the target process.




